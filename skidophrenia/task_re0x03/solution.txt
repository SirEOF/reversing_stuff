-string in local_1dh : Q}|u`sfg~sf{}|a3
-has 16 bytes in local_24h
-0 in local_28h


  *main will call test and will jump unfortunately always to ...8bd5
  *we have to find out how to pass this
  *because with randomized function before, it will be impossible to determine a single true password

|           0x08048a74      55             push ebp
|           0x08048a75      89e5           mov ebp, esp
|           0x08048a77      83ec28         sub esp, 0x28               ; '('
|           0x08048a7a      8b4508         mov eax, dword [ebp + arg_8h] ; [0x8:4]=0
|           0x08048a7d      8b550c         mov edx, dword [ebp + arg_ch] ; [0xc:4]=0
|           0x08048a80      29c2           sub edx, eax
|           0x08048a82      89d0           mov eax, edx
|           0x08048a84      8945f4         mov dword [ebp - local_ch], eax
|           0x08048a87      837df415       cmp dword [ebp - local_ch], 0x15 ; [0x15:4]=0x50000
|       ,=< 0x08048a8b      0f8744010000   ja 0x8048bd5                ;[1]
|       |   0x08048a91      8b45f4         mov eax, dword [ebp - local_ch]
|       |   0x08048a94      c1e002         shl eax, 2
|       |   0x08048a97      05308d0408     add eax, 0x8048d30
|       |   0x08048a9c      8b00           mov eax, dword [eax]
\       |   0x08048a9e      ffe0           jmp eax

  *sym.test will jump here and starts decrypt
  *it seems that there are other possibilities of starting decrypt without doing rand before


            ; UNKNOWN XREF from 0x08048d78 (unk)
            0x08048ba1      8b45f4         mov eax, dword [ebp - 0xc]
            0x08048ba4      890424         mov dword [esp], eax
            0x08048ba7      e80bfeffff     call sym.decrypt            ;[1]
        ,=< 0x08048bac      eb34           jmp 0x8048be2               ;[2]
        |   ; UNKNOWN XREF from 0x08048d7c (unk)
        |   0x08048bae      8b45f4         mov eax, dword [ebp - 0xc]
        |   0x08048bb1      890424         mov dword [esp], eax
        |   0x08048bb4      e8fefdffff     call sym.decrypt            ;[1]
       ,==< 0x08048bb9      eb27           jmp 0x8048be2               ;[2]
       ||   ; UNKNOWN XREF from 0x08048d80 (unk)
       ||   0x08048bbb      8b45f4         mov eax, dword [ebp - 0xc]
       ||   0x08048bbe      890424         mov dword [esp], eax
       ||   0x08048bc1      e8f1fdffff     call sym.decrypt            ;[1]
      ,===< 0x08048bc6      eb1a           jmp 0x8048be2               ;[2]
      |||   ; UNKNOWN XREF from 0x08048d84 (unk)
      |||   0x08048bc8      8b45f4         mov eax, dword [ebp - 0xc]
      |||   0x08048bcb      890424         mov dword [esp], eax
      |||   0x08048bce      e8e4fdffff     call sym.decrypt            ;[1]
     ,====< 0x08048bd3      eb0d           jmp 0x8048be2               ;[2]
     ||||   ; UNKNOWN XREF from 0x08048d30 (unk)
     ||||   0x08048bd5      e856fcffff     call sym.imp.rand           ;[3]; int rand(void);
     ||||   0x08048bda      890424         mov dword [esp], eax
     ||||   0x08048bdd      e8d5fdffff     call sym.decrypt            ;[1]
     ````-> 0x08048be2      c9             leave


*this part calculates ebp_1dh

|      .--> 0x08048a08      8d55e3         lea edx, dword [ebp - local_1dh]                                                      |      ||   0x08048a0b      8b45d8         mov eax, dword [ebp - local_28h]                                                                                                                      
|      ||   0x08048a0e      01d0           add eax, edx                                                                                                                 
|      ||   0x08048a10      0fb600         movzx eax, byte [eax]                                                                                                                                 
|      ||   0x08048a13      89c2           mov edx, eax                                                                                                                                          
|      ||   0x08048a15      8b4508         mov eax, dword [ebp + arg_8h] ; [0x8:4]=0                                                                                                             
|      ||   0x08048a18      31d0           xor eax, edx					#                                                                                                                                           
|      ||   0x08048a1a      8d4de3         lea ecx, dword [ebp - local_1dh]                                                                                                                      
|      ||   0x08048a1d      8b55d8         mov edx, dword [ebp - local_28h]                                                                                                                      
|      ||   0x08048a20      01ca           add edx, ecx                                                                                                                                          
|      ||   0x08048a22      8802           mov byte [edx], al                                                                                                                                    
|      ||   0x08048a24      8345d801       add dword [ebp - local_28h], 1                                                                                                                        
|      ||   ; JMP XREF from 0x08048a06 (sym.decrypt)                                                                                                                                             
|      |`-> 0x08048a28      8b45d8         mov eax, dword [ebp - local_28h]                                                                                                                      
|      |    0x08048a2b      3b45dc         cmp eax, dword [ebp - local_24h]                                                                                                                      
|      `==< 0x08048a2e      72d8           jb 0x8048a08                ;[4]                

  *after executing this block, every new calculated byte will be pushed into local_28h

*this part will compare the value in local_1dh with the string "Congratulations!"

   0x08048a30      c7442404038d.  mov dword [esp + local_4h], str.Congratulations_ ; [0x8048d03:4]=0x676e6f43 LEA str.Congratulations_ ; "Congratulations!" @ 0x8048d03                 
|           0x08048a38      8d45e3         lea eax, dword [ebp - local_1dh]                                                                                                                      
|           0x08048a3b      890424         mov dword [esp], eax        ; const char * s2                                                                                                         
|           0x08048a3e      e82dfdffff     call sym.imp.strcmp         ;[5]; int strcmp(const char *s1, const char *s2);                                                                         
|           0x08048a43      85c0           test eax, eax                                                                                                                                         
|       ,=< 0x08048a45      750e           jne 0x8048a55               ;[6]                                                                                                                      
|       |   0x08048a47      c70424148d04.  mov dword [esp], str._bin_sh ; [0x8048d14:4]=0x6e69622f LEA str._bin_sh ; "/bin/sh" @ 0x8048d14                                                       
|       |   0x08048a4e      e88dfdffff     call sym.imp.system         ;[7]; int system(const char *string);
                                                                                                    










  *on this line we can patch the value to change our execution flow
  *before is the constant value 0x1337dood in there


Breakpoint 2, 0x08048a87 in test ()
(gdb) set *0xffffd20c=0x15
                                         
 0x08048a87      837df415       cmp dword [ebp - local_ch], 0x15 ; [0x15:4]=0x50000



Breakpoint 3, 0x08048a3e in decrypt ()
(gdb) x/10xw $esp-0x30
0xffffd180:	0xf7fe784b	0x00000000	0x00000001	0xf7fa1000
0xffffd190:	0xffffd1e8	0xf7fedf50	0x1337d00d	0xf7e6bae0
0xffffd1a0:	0xffffd1cb	0xf7fa1000
(gdb) x/s $esp
0xffffd1b0:	"\313\321\377\377\003\215\004\b"
(gdb) x/s *$esp
Attempt to dereference a generic pointer.
(gdb) x/s $esp
0xffffd1b0:	"\313\321\377\377\003\215\004\b"
(gdb) x/s (char *)$esp
0xffffd1b0:	"\313\321\377\377\003\215\004\b"
(gdb) x/s *0xffffd1b0
0xffffd1cb:	"Dhi`ufsrkfsnhit&"

  *but we won't have any influence to it, that sucks


  *have to find location of given string, cant find it ?!?! 
  *in esp + 0x4 should be the address for saving
|           0x08048c3a      8d44241c       lea eax, dword [esp + arg_1ch] ; 0x1c ; 28          
|           0x08048c3e      89442404       mov dword [esp + local_4h], eax                     
|           0x08048c42      c70424ee8d04.  mov dword [esp], 0x8048dee  ; [0x8048dee:4]=0x6425  
|           0x08048c49      e8f2fbffff     call sym.imp.__isoc99_scanf ;[6]; int scanf(const c 
|           0x08048c4e      8b44241c       mov eax, dword [esp + arg_1ch] ; [0x1c:4]=-1 ; 28   


* placing numbers instead of letters will write something into our register


Continuing.
Password: aslekfwaefoijfölkewasöldgfewpfokewadföldsakmawerfwef

Breakpoint 2, 0x08048c4e in main ()
(gdb) x/x $esp+0x1c
0xffffd23c:	0x00000000
(gdb) x/x $esp+0x4
0xffffd224:	0xffffd23c
(gdb) x/10x *0xffffd23c
0x0:	Cannot access memory at address 0x0



Breakpoint 1, 0x08048c49 in main ()
(gdb) c
Continuing.
Password: 122238321948321479324782103982103812487321749213         

Breakpoint 2, 0x08048c4e in main ()
(gdb) x/10x *0xffffd23c
0x7fffffff:	Cannot access memory at address 0x7fffffff

  =>reads as integer value


  *this password seems to pass the previous patched condition


Breakpoint 6, 0x08048a80 in test ()
(gdb) x/x $eax
0x8ae:	Cannot access memory at address 0x8ae
(gdb) x/x $edx
0x1337d00d:	Cannot access memory at address 0x1337d00d
(gdb) p 0x1337d00d-0x15
$1 = 322424824

* I can do a lot of calculating, but JA means jump when above, so trying to hit the complement won't work

(gdb) p/x 0x1337cff8+0x15+0x15
$20 = 0x1337d022
(gdb) p 0x1337d022-0x1337d00d
$21 = 21
(gdb) p 0x1337d022
$22 = 322424866
(gdb)

* it's more fruitful to take numbers under our given border
 
(gdb) p 0x1337d00d-0x1337cff8
$25 = 21
(gdb) p 0x1337d00d-0x1337cff7
$26 = 22
(gdb) p 0x1337d00d-0x1337cff9
$27 = 20
(gdb) p 0x1337cff9
$28 = 322424825


  *that's the password 322424827 
